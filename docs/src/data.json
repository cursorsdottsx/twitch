{
    "meta": { "generator": "1.0.0", "format": 20, "date": 1623958286221 },
    "classes": [
        {
            "name": "Base",
            "description": "Base class for any entity returned by the Twitch API.",
            "abstract": true,
            "construct": {
                "name": "Base",
                "description": "Constructs a new base prototype.",
                "params": [
                    { "name": "client", "description": "Client that instantiated this entity.", "type": [[["Client"]]] }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "Client that instantiated this entity.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 19, "file": "Base.js", "path": "dist/base" }
                }
            ],
            "meta": { "line": 8, "file": "Base.js", "path": "dist/base" }
        },
        {
            "name": "Cache",
            "description": "Implements some sort of LFU cache with a few utility methods.\nBuilt specifically for entity managers.",
            "construct": {
                "name": "Cache",
                "description": "Creates a new cache.",
                "params": [
                    {
                        "name": "options",
                        "description": "Options to configure the caching behaviour.",
                        "type": [[["CacheOptions"]]]
                    }
                ]
            },
            "methods": [
                {
                    "name": "clear",
                    "description": "Clears the entire cache.",
                    "returns": { "types": [[["void"]]], "description": "Nothing." },
                    "meta": { "line": 27, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "get",
                    "description": "Retrieves a value from the cache.",
                    "params": [{ "name": "key", "description": "Key to retrieve.", "type": [[["string"]]] }],
                    "returns": {
                        "types": [[["Value"]], [["undefined"]]],
                        "description": "The retrieved value, if any."
                    },
                    "meta": { "line": 41, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "set",
                    "description": "Sets or updates a key to a new value.",
                    "params": [
                        { "name": "key", "description": "Key to set or update.", "type": [[["string"]]] },
                        { "name": "value", "description": "New value to store.", "type": [[["Value"]]] }
                    ],
                    "returns": { "types": [[["this"]]], "description": "The newly updated cache." },
                    "meta": { "line": 63, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "delete",
                    "description": "Deletes a key from the cache.",
                    "params": [{ "name": "key", "description": "Key to delete", "type": [[["string"]]] }],
                    "returns": { "types": [[["Value"]]], "description": "The deleted value." },
                    "meta": { "line": 85, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "has",
                    "description": "Returns true if the cache holds the key.",
                    "params": [{ "name": "key", "description": "Key to check.", "type": [[["string"]]] }],
                    "returns": { "types": [[["boolean"]]], "description": "True if the cache has the key." },
                    "meta": { "line": 100, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "find",
                    "description": "Performs a search operation on the cache's values.",
                    "params": [
                        {
                            "name": "predicate",
                            "description": "Callback function to execute.",
                            "type": [[["function"]]]
                        },
                        {
                            "name": "thisArg",
                            "description": "Optional `this` context for the callback.",
                            "type": [[["any"]], [["undefined"]]]
                        }
                    ],
                    "returns": { "types": [[["Value"]], [["undefined"]]], "description": "The found value, if any." },
                    "meta": { "line": 109, "file": "Cache.js", "path": "dist/base" }
                }
            ],
            "meta": { "line": 12, "file": "Cache.js", "path": "dist/base" }
        },
        {
            "name": "Client",
            "description": "The main client to interact with the Twitch API.\nSupports app and user access tokens and is configurable.\nDelegates API endpoints to different managers.",
            "extends": [[["EventEmitter"]]],
            "construct": {
                "name": "Client",
                "description": "Creates a new client to interact with the Twitch API.",
                "params": [
                    { "name": "options", "description": "Options for the client.", "type": [[["ClientOptions"]]] }
                ]
            },
            "props": [
                {
                    "name": "options",
                    "description": "Options given to the client.",
                    "readonly": true,
                    "type": [[["ClientOptions"]]],
                    "meta": { "line": 36, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "scope",
                    "description": "Client's token's current scopes.",
                    "readonly": true,
                    "type": [
                        [
                            ["Array", "<"],
                            ["string", ">"]
                        ]
                    ],
                    "meta": { "line": 54, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "channels",
                    "description": "Client's channel manager.",
                    "readonly": true,
                    "type": [[["ChannelManager"]]],
                    "meta": { "line": 60, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "users",
                    "description": "Client's user manager.",
                    "readonly": true,
                    "type": [[["UserManager"]]],
                    "meta": { "line": 66, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "emotes",
                    "description": "Client's emote manager.",
                    "readonly": true,
                    "type": [[["EmoteManager"]]],
                    "meta": { "line": 72, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "token",
                    "description": "Current token being used.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 296, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "type",
                    "description": "Authentication type; either `\"app\"` or `\"user\"`.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 304, "file": "Client.js", "path": "dist/base" }
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "description": "Logs in the client and retrieves an app access token.",
                    "examples": ["```js\nconst token = await client.login();\n```"],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<("],
                                ["string", "|"],
                                ["object", ")>"]
                            ]
                        ],
                        "description": "The new access token or OAuth details object."
                    },
                    "meta": { "line": 84, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "destroy",
                    "description": "Destroys the client and revokes its access token.\n\nTODO: Add a destroy method on managers as well and call it here.",
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["undefined", ">"]
                            ]
                        ],
                        "description": "Nothing."
                    },
                    "meta": { "line": 206, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "setInterval",
                    "description": "Sets an interval to be managed by the client.",
                    "access": "private",
                    "returns": [[["Timeout"]]],
                    "meta": { "line": 312, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "setTimeout",
                    "description": "Sets a timeout to be managed by the client.",
                    "access": "private",
                    "returns": [[["Timeout"]]],
                    "meta": { "line": 322, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "clearInterval",
                    "description": "Clears an interval managed by the client.",
                    "access": "private",
                    "returns": [[["undefined"]]],
                    "meta": { "line": 332, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "clearTimeout",
                    "description": "Clears a timeout managed by the client.",
                    "access": "private",
                    "returns": [[["undefined"]]],
                    "meta": { "line": 342, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "on",
                    "description": "Adds an event listener to the client.",
                    "params": [
                        { "name": "event", "description": "Event to listen to.", "type": [[["string"]]] },
                        { "name": "listener", "description": "Callback for the event.", "type": [[["function"]]] }
                    ],
                    "returns": { "types": [[["Client"]]], "description": "The client instance." },
                    "meta": { "line": 353, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "once",
                    "description": "Adds an event listener to the client, but the listener gets removed as soon as an event is received.",
                    "params": [
                        { "name": "event", "description": "Event to listen to.", "type": [[["string"]]] },
                        { "name": "listener", "description": "Callback for the event.", "type": [[["function"]]] }
                    ],
                    "returns": { "types": [[["Client"]]], "description": "The client instance." },
                    "meta": { "line": 362, "file": "Client.js", "path": "dist/base" }
                }
            ],
            "events": [
                {
                    "name": "ready",
                    "description": "Emitted when the client has been set up.",
                    "meta": { "line": 32, "file": "client.js", "path": "dist/types/base" }
                },
                {
                    "name": "debug",
                    "description": "Emits general debugging info.",
                    "params": [
                        { "name": "info", "description": "Debugging information emitted.", "type": [[["string"]]] }
                    ],
                    "meta": { "line": 36, "file": "client.js", "path": "dist/types/base" }
                },
                {
                    "name": "destroy",
                    "description": "Emitted when the client has been destroyed.",
                    "meta": { "line": 41, "file": "client.js", "path": "dist/types/base" }
                },
                {
                    "name": "channelCreate",
                    "description": "Emitted when a new Channel instance has been created.",
                    "params": [{ "name": "channel", "description": "The new channel.", "type": [[["Channel"]]] }],
                    "meta": { "line": 45, "file": "client.js", "path": "dist/types/base" }
                },
                {
                    "name": "userCreate",
                    "description": "Emitted when a new User instance has been created.",
                    "params": [{ "name": "user", "description": "The new user.", "type": [[["User"]]] }],
                    "meta": { "line": 50, "file": "client.js", "path": "dist/types/base" }
                },
                {
                    "name": "channelEmoteCreate",
                    "description": "Emitted when a new ChannelEmote instance has been created.",
                    "params": [
                        { "name": "emote", "description": "The new channel emote.", "type": [[["ChannelEmote"]]] }
                    ],
                    "meta": { "line": 55, "file": "client.js", "path": "dist/types/base" }
                },
                {
                    "name": "channelEmoteSetCreate",
                    "description": "Emitted when a new ChannelEmoteSet instance has been created.",
                    "params": [
                        { "name": "set", "description": "The new channel emote set.", "type": [[["ChannelEmoteSet"]]] }
                    ],
                    "meta": { "line": 60, "file": "client.js", "path": "dist/types/base" }
                },
                {
                    "name": "channelRewardCreate",
                    "description": "Emitted when a new ChannelReward instance has been created.",
                    "params": [
                        { "name": "reward", "description": "The new channel reward.", "type": [[["ChannelReward"]]] }
                    ],
                    "meta": { "line": 65, "file": "client.js", "path": "dist/types/base" }
                }
            ],
            "meta": { "line": 19, "file": "Client.js", "path": "dist/base" }
        },
        {
            "name": "Manager",
            "description": "Manager superclass with a cache and method to fetch entities.",
            "abstract": true,
            "construct": {
                "name": "Manager",
                "description": "Creates a new manager.",
                "params": [
                    {
                        "name": "client",
                        "description": "Client that instantiated this manager.",
                        "type": [[["Client"]]]
                    },
                    { "name": "options", "description": "Options for the cache.", "type": [[["CacheOptions"]]] }
                ]
            },
            "props": [
                {
                    "name": "cache",
                    "description": "Data cached by the manager.",
                    "readonly": true,
                    "type": [
                        [
                            ["Cache", "<"],
                            ["Value", ">"]
                        ]
                    ],
                    "meta": { "line": 27, "file": "Manager.js", "path": "dist/base" }
                }
            ],
            "meta": { "line": 12, "file": "Manager.js", "path": "dist/base" }
        },
        {
            "name": "Channel",
            "description": "Twitch API's channel entity represented in a class.",
            "extends": [[["Base"]]],
            "construct": {
                "name": "Channel",
                "description": "Creates a new channel.",
                "params": [
                    {
                        "name": "client",
                        "description": "Client that instantiated this channel.",
                        "type": [[["Client"]]]
                    },
                    { "name": "data", "description": "Channel data.", "type": [[["ChannelData"]]] }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "Client that instantiated this channel.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 32, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "emotes",
                    "description": "Manages this channel's emotes.",
                    "readonly": true,
                    "type": [[["ChannelEmoteManager"]]],
                    "meta": { "line": 38, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "emoteSets",
                    "description": "Manages this channel's emote sets.",
                    "readonly": true,
                    "type": [[["ChannelEmoteSetManager"]]],
                    "meta": { "line": 44, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "rewards",
                    "description": "Manages this channel's rewards.",
                    "readonly": true,
                    "type": [[["ChannelRewardManager"]]],
                    "meta": { "line": 50, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "id",
                    "description": "Broadcaster ID of the channel.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 58, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "language",
                    "description": "Main language of the channel.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 66, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "name",
                    "description": "Name of the channel.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 74, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "gameName",
                    "description": "Current game name.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 82, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "gameId",
                    "description": "Current game ID.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 90, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "title",
                    "description": "Title of the channel.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 98, "file": "Channel.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "delay",
                    "description": "Delay of the channel.",
                    "readonly": true,
                    "type": [[["number"]]],
                    "meta": { "line": 106, "file": "Channel.js", "path": "dist/classes/channels" }
                }
            ],
            "methods": [
                {
                    "name": "update",
                    "description": "Updates this instance with newly fetched data.",
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the update was successful."
                    },
                    "meta": { "line": 113, "file": "Channel.js", "path": "dist/classes/channels" }
                }
            ],
            "meta": { "line": 17, "file": "Channel.js", "path": "dist/classes/channels" }
        },
        {
            "name": "ChannelEmote",
            "description": "An emote used in a channel on Twitch.",
            "extends": [[["Emote"]]],
            "construct": {
                "name": "ChannelEmote",
                "description": "Creates a new channel emote.",
                "params": [
                    { "name": "client", "description": "Client that instantiated this emote.", "type": [[["Client"]]] },
                    { "name": "data", "description": "Emote data to consume.", "type": [[["ChannelEmoteData"]]] },
                    { "name": "broadcasterId", "description": "ID of the broadcaster.", "type": [[["string"]]] }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "Client that instantiated this emote.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 29, "file": "ChannelEmote.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "id",
                    "description": "This emote's ID.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 37, "file": "ChannelEmote.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "name",
                    "description": "This emote's name.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 45, "file": "ChannelEmote.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "images",
                    "description": "This emote's image urls.",
                    "readonly": true,
                    "type": [
                        [
                            ["Array", "<"],
                            ["string", ">"]
                        ]
                    ],
                    "meta": { "line": 53, "file": "ChannelEmote.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "tier",
                    "description": "This emote's tier.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 61, "file": "ChannelEmote.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "type",
                    "description": "This emote's type.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 69, "file": "ChannelEmote.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "setId",
                    "description": "This emote's set's ID.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 77, "file": "ChannelEmote.js", "path": "dist/classes/channels" }
                }
            ],
            "methods": [
                {
                    "name": "update",
                    "description": "Updates this emote with newly fetched data from the API.",
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the update was successful."
                    },
                    "meta": { "line": 84, "file": "ChannelEmote.js", "path": "dist/classes/channels" }
                }
            ],
            "meta": { "line": 12, "file": "ChannelEmote.js", "path": "dist/classes/channels" }
        },
        {
            "name": "ChannelEmoteManager",
            "description": "Manages channel emotes.",
            "extends": [[["Manager"]]],
            "construct": {
                "name": "ChannelEmoteManager",
                "description": "Constructs a new channel emote manager.",
                "params": [
                    {
                        "name": "client",
                        "description": "Client that instantiated this manager.",
                        "type": [[["Client"]]]
                    },
                    {
                        "name": "channel",
                        "description": "Channel that instantiated this manager.",
                        "type": [[["Channel"]]]
                    }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "Client that instantiated this manager.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 40, "file": "ChannelEmoteManager.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "cache",
                    "description": "Data cached by the manager.",
                    "readonly": true,
                    "type": [
                        [
                            ["Cache", "<"],
                            ["Value", ">"]
                        ]
                    ],
                    "meta": { "line": 27, "file": "Manager.js", "path": "dist/base" }
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "description": "Fetches emotes from the channel.",
                    "params": [
                        {
                            "name": "id",
                            "description": "Optional ID to fetch.",
                            "type": [[["string"]], [["undefined"]]]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<("],
                                ["ChannelEmote", "|"],
                                ["undefined", ")>"]
                            ],
                            [
                                ["Promise", "<"],
                                ["Collection", "<"],
                                ["string", ", "],
                                ["ChannelEmote", ">>"]
                            ]
                        ],
                        "description": "The fetched emotes."
                    },
                    "meta": { "line": 47, "file": "ChannelEmoteManager.js", "path": "dist/classes/channels" }
                }
            ],
            "meta": { "line": 14, "file": "ChannelEmoteManager.js", "path": "dist/classes/channels" }
        },
        {
            "name": "ChannelEmoteSet",
            "description": "A set of channel emotes.",
            "extends": [[["Base"]]],
            "construct": {
                "name": "ChannelEmoteSet",
                "description": "Creates a new channel emote set.",
                "params": [
                    { "name": "client", "description": "Client that instantiated this set.", "type": [[["Client"]]] },
                    {
                        "name": "data",
                        "description": "Data for the emote set.",
                        "type": [
                            [
                                ["Array", "<"],
                                ["SetEmoteData", ">"]
                            ]
                        ]
                    },
                    { "name": "channel", "description": "Channel the set is in.", "type": [[["Channel"]]] }
                ]
            },
            "props": [
                {
                    "name": "channelID",
                    "description": "Parent channel's ID.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 31, "file": "ChannelEmoteSet.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "id",
                    "description": "Emote set's ID.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 37, "file": "ChannelEmoteSet.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "emotes",
                    "description": "The set of emotes in this set.",
                    "readonly": true,
                    "type": [
                        [
                            ["Collection", "<"],
                            ["string", ", "],
                            ["ChannelEmote", ">"]
                        ]
                    ],
                    "meta": { "line": 47, "file": "ChannelEmoteSet.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "client",
                    "description": "Client that instantiated this set.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 53, "file": "ChannelEmoteSet.js", "path": "dist/classes/channels" }
                }
            ],
            "methods": [
                {
                    "name": "update",
                    "description": "Updates this instance with new data from the API.",
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the update was successful."
                    },
                    "meta": { "line": 60, "file": "ChannelEmoteSet.js", "path": "dist/classes/channels" }
                }
            ],
            "meta": { "line": 14, "file": "ChannelEmoteSet.js", "path": "dist/classes/channels" }
        },
        {
            "name": "ChannelEmoteSetManager",
            "description": "Manages emote sets in a channel.",
            "extends": [
                [
                    ["Manager", "<"],
                    ["ChannelEmoteSet", ">"]
                ]
            ],
            "construct": {
                "name": "ChannelEmoteSetManager",
                "description": "Creates a new channel emote set manager.",
                "params": [
                    {
                        "name": "client",
                        "description": "Client that instantiated this manager.",
                        "type": [[["Client"]]]
                    },
                    { "name": "channel", "description": "Channel this manager belongs to.", "type": [[["Channel"]]] }
                ]
            },
            "props": [
                {
                    "name": "channel",
                    "description": "Channel this manager belongs to.",
                    "readonly": true,
                    "type": [[["Channel"]]],
                    "meta": { "line": 38, "file": "ChannelEmoteSetManager.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "client",
                    "description": "Client that instantiated this manager.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 44, "file": "ChannelEmoteSetManager.js", "path": "dist/classes/channels" }
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "description": "Fetches an emote set from the API.",
                    "params": [
                        { "name": "id", "description": "ID of the emote set to fetch.", "type": [[["string"]]] }
                    ],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["ChannelEmoteSet", ">"]
                            ]
                        ],
                        "description": "The fetched emote set."
                    },
                    "meta": { "line": 51, "file": "ChannelEmoteSetManager.js", "path": "dist/classes/channels" }
                }
            ],
            "meta": { "line": 13, "file": "ChannelEmoteSetManager.js", "path": "dist/classes/channels" }
        },
        {
            "name": "ChannelManager",
            "description": "Manages channels.",
            "extends": [
                [
                    ["Manager", "<"],
                    ["Channel", ">"]
                ]
            ],
            "construct": {
                "name": "ChannelManager",
                "description": "Creates a new channel manager.",
                "params": [
                    {
                        "name": "client",
                        "description": "Client that instantiated this channel.",
                        "type": [[["Client"]]]
                    }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "Client that instantiated this channel.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 39, "file": "ChannelManager.js", "path": "dist/classes/channels" }
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "description": "Fetches a channel from the Twitch API.",
                    "params": [
                        { "name": "id", "description": "ID to fetch.", "type": [[["string"]]] },
                        {
                            "name": "force",
                            "description": "Skip cache check and request directly from the API.",
                            "type": [[["boolean"]], [["undefined"]]]
                        }
                    ],
                    "meta": { "line": 46, "file": "ChannelManager.js", "path": "dist/classes/channels" }
                }
            ],
            "meta": { "line": 14, "file": "ChannelManager.js", "path": "dist/classes/channels" }
        },
        {
            "name": "ChannelReward",
            "description": "A reward in a channel.",
            "extends": [[["Base"]]],
            "construct": {
                "name": "ChannelReward",
                "description": "Creates a new channel reward entity.",
                "params": [
                    { "name": "client", "description": "Client that instantiated this reward.", "type": [] },
                    { "name": "data", "description": "Data for the reward.", "type": [] }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "Client that instantiated this reward.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 23, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "broadcasterId",
                    "description": "ID of the broadcaster.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 32, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "broadcasterLogin",
                    "description": "Broadcaster's login.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 40, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "broadcasterName",
                    "description": "Broadcaster's name.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 48, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "id",
                    "description": "Reward's id.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 56, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "title",
                    "description": "Reward's title.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 64, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "prompt",
                    "description": "Reward's prompt.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 72, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "cost",
                    "description": "Reward's cost.",
                    "readonly": true,
                    "type": [[["number"]]],
                    "meta": { "line": 80, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "image",
                    "description": "Reward's image URL.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 88, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "defaultImage",
                    "description": "Reward's default image URL.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 96, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "backgroundColor",
                    "description": "Reward's background color.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 104, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "isEnabled",
                    "description": "If the reward is enabled.",
                    "readonly": true,
                    "type": [[["boolean"]]],
                    "meta": { "line": 112, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "userInputRequired",
                    "description": "If user input is required.",
                    "readonly": true,
                    "type": [[["boolean"]]],
                    "meta": { "line": 120, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "maxPerStream",
                    "description": "Max reward count per stream.",
                    "readonly": true,
                    "type": [[["object"]]],
                    "meta": { "line": 128, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "maxPerUser",
                    "description": "Max reward per user per stream.",
                    "readonly": true,
                    "type": [[["object"]]],
                    "meta": { "line": 136, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "globalCooldown",
                    "description": "Global cooldown.",
                    "readonly": true,
                    "type": [[["object"]]],
                    "meta": { "line": 144, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "isPaused",
                    "description": "If the reward is paused.",
                    "readonly": true,
                    "type": [[["boolean"]]],
                    "meta": { "line": 152, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "isInStock",
                    "description": "If the reward is in stock.",
                    "readonly": true,
                    "type": [[["boolean"]]],
                    "meta": { "line": 160, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "redemptionsSkipQueue",
                    "description": "Should redemptions skip the request queue?",
                    "readonly": true,
                    "type": [[["boolean"]]],
                    "meta": { "line": 168, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "redemptionsRedeemed",
                    "description": "Redemptions redeemed.",
                    "readonly": true,
                    "type": [[["number"]]],
                    "meta": { "line": 176, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                },
                {
                    "name": "cooldownExpiresAt",
                    "description": "When the cooldown expires.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 184, "file": "ChannelReward.js", "path": "dist/classes/channels" }
                }
            ],
            "meta": { "line": 10, "file": "ChannelReward.js", "path": "dist/classes/channels" }
        },
        {
            "name": "ChannelRewardManager",
            "construct": {
                "name": "ChannelRewardManager",
                "description": "Creates a new channel reward manager.",
                "params": [
                    {
                        "name": "client",
                        "description": "Client that instantiated this manager.",
                        "type": [[["Client"]]]
                    },
                    { "name": "channelId", "description": "Parent channel's id.", "type": [[["string"]]] }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "Client that instantiated this manager.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 30, "file": "ChannelRewardManager.js", "path": "dist/classes/channels" }
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "description": "Fetches a reward.\nTODO: Implement fetching.",
                    "params": [{ "name": "id", "description": "ID to fetch.", "type": [[["string"]]] }],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<("],
                                ["ChannelReward", "|"],
                                ["undefined", ")>"]
                            ]
                        ],
                        "description": "The fetched reward, if any."
                    },
                    "meta": { "line": 39, "file": "ChannelRewardManager.js", "path": "dist/classes/channels" }
                }
            ],
            "meta": { "line": 11, "file": "ChannelRewardManager.js", "path": "dist/classes/channels" }
        },
        {
            "name": "Emote",
            "description": "Represents a global emote on Twitch.",
            "extends": [[["Base"]]],
            "construct": {
                "name": "Emote",
                "description": "Constructs an Emote from the client and raw data.",
                "params": [
                    { "name": "client", "description": "The client this emote belongs to", "type": [[["Client"]]] },
                    { "name": "data", "description": "The raw data provided by the api", "type": [[["EmoteData"]]] }
                ]
            },
            "props": [
                {
                    "name": "id",
                    "description": "The emote's ID",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 30, "file": "Emote.js", "path": "dist/classes/emotes" }
                },
                {
                    "name": "name",
                    "description": "The emote's name",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 38, "file": "Emote.js", "path": "dist/classes/emotes" }
                },
                {
                    "name": "images",
                    "description": "The emote's images",
                    "readonly": true,
                    "type": [
                        [
                            ["Array", "<"],
                            ["string", ">"]
                        ]
                    ],
                    "meta": { "line": 46, "file": "Emote.js", "path": "dist/classes/emotes" }
                },
                {
                    "name": "client",
                    "description": "Client that instantiated this entity.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 19, "file": "Base.js", "path": "dist/base" }
                }
            ],
            "methods": [
                {
                    "name": "update",
                    "description": "Updates this emote's data.",
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the update was succesful."
                    },
                    "meta": { "line": 53, "file": "Emote.js", "path": "dist/classes/emotes" }
                }
            ],
            "meta": { "line": 13, "file": "Emote.js", "path": "dist/classes/emotes" }
        },
        {
            "name": "EmoteManager",
            "description": "Manages global emotes.",
            "extends": [
                [
                    ["Manager", "<"],
                    ["Emote", ">"]
                ]
            ],
            "construct": {
                "name": "EmoteManager",
                "description": "Constructs an EmoteManager for the client.",
                "params": [
                    {
                        "name": "client",
                        "description": "The client that this manager belongs to",
                        "type": [[["Client"]]]
                    }
                ]
            },
            "methods": [
                {
                    "name": "get",
                    "description": "Returns the emote with the given ID in cache or undefined.",
                    "params": [{ "name": "id", "description": "the ID of the emote to get", "type": [[["string"]]] }],
                    "returns": {
                        "types": [[["Emote"]], [["undefined"]]],
                        "description": "the emote with the given ID"
                    },
                    "meta": { "line": 40, "file": "EmoteManager.js", "path": "dist/classes/emotes" }
                },
                {
                    "name": "fetch",
                    "description": "Fetches global emotes from Twitch.",
                    "params": [
                        {
                            "name": "id",
                            "description": "Fetches the emote with this ID.",
                            "type": [[["string"]], [["undefined"]]]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["Emote", ">"]
                            ],
                            [
                                ["Promise", "<"],
                                ["Collection", "<"],
                                ["string", ", "],
                                ["Emote", ">>"]
                            ]
                        ],
                        "description": "The fetched emotes."
                    },
                    "meta": { "line": 48, "file": "EmoteManager.js", "path": "dist/classes/emotes" }
                }
            ],
            "meta": { "line": 14, "file": "EmoteManager.js", "path": "dist/classes/emotes" }
        },
        {
            "name": "ClientUser",
            "description": "User representing the client on Twitch.",
            "extends": [[["User"]]],
            "construct": {
                "name": "ClientUser",
                "description": "Creates a new user.",
                "params": [
                    { "name": "client", "description": "Client that instantiated this user.", "type": [[["Client"]]] },
                    { "name": "data", "description": "User's data.", "type": [[["UserData"]]] }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "Client that instantiated this user.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 25, "file": "ClientUser.js", "path": "dist/classes/users" }
                },
                {
                    "name": "id",
                    "description": "The user's ID.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 37, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "login",
                    "description": "The user's login name (username but all lowercase).",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 45, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "displayName",
                    "description": "The user's display name.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 53, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "type",
                    "description": "The user's type (staff status).",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 61, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "broadcasterType",
                    "description": "The user's broadcaster type (partner program).",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 69, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "viewCount",
                    "description": "Total number of views on this user's channel.",
                    "readonly": true,
                    "type": [[["number"]]],
                    "meta": { "line": 77, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "email",
                    "description": "Returns the email of the user (scope `user:read:email` is required).",
                    "readonly": true,
                    "type": [[["string"]], [["undefined"]]],
                    "meta": { "line": 85, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "description",
                    "description": "The user's description.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 93, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "createdAt",
                    "description": "The Date object when the user was created.",
                    "readonly": true,
                    "type": [[["Date"]]],
                    "meta": { "line": 104, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "createdTimestamp",
                    "description": "The unix timestamp when the user was created.",
                    "readonly": true,
                    "type": [[["number"]]],
                    "meta": { "line": 112, "file": "User.js", "path": "dist/classes/users" }
                }
            ],
            "methods": [
                {
                    "name": "setDescription",
                    "description": "Updates the description of this user.",
                    "params": [{ "name": "description", "description": "New description.", "type": [[["string"]]] }],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the update was succesful."
                    },
                    "meta": { "line": 32, "file": "ClientUser.js", "path": "dist/classes/users" }
                },
                {
                    "name": "avatarURL",
                    "description": "Returns the user's avatar URL.\nIf `options.offline` is true, the offline avatar will be returned.",
                    "inherits": "User#avatarURL",
                    "inherited": true,
                    "params": [
                        {
                            "name": "options",
                            "description": "Options for the avatar URL.",
                            "type": [[["AvatarURLOptions"]]]
                        }
                    ],
                    "returns": { "types": [[["string"]]], "description": "The user's avatar URL." },
                    "meta": { "line": 121, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "update",
                    "description": "Updates this user object to hold the newest data.",
                    "inherits": "User#update",
                    "inherited": true,
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the update was successful."
                    },
                    "meta": { "line": 128, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "block",
                    "description": "Blocks the user. Requires the `user:manage:blocked_users` scope.",
                    "inherits": "User#block",
                    "inherited": true,
                    "params": [
                        {
                            "name": "options",
                            "description": "User block options.",
                            "type": [[["BlockOptions"]], [["undefined"]]]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the user was unblocked."
                    },
                    "meta": { "line": 166, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "unblock",
                    "description": "Unblocks the given user. Requires the `user:manage:blocked_users` scope.",
                    "inherits": "User#unblock",
                    "inherited": true,
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the user was unblocked."
                    },
                    "meta": { "line": 195, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "fetchBlocks",
                    "description": "Returns an array of users that are blocked by this user.",
                    "inherits": "User#fetchBlocks",
                    "inherited": true,
                    "params": [
                        {
                            "name": "options",
                            "description": "Fetch options.",
                            "type": [[["BlocksFetchOptions"]], [["undefined"]]]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["Array", "<"],
                                ["User", ">>"]
                            ]
                        ],
                        "description": "An array of users that are blocked."
                    },
                    "meta": { "line": 220, "file": "User.js", "path": "dist/classes/users" }
                }
            ],
            "meta": { "line": 12, "file": "ClientUser.js", "path": "dist/classes/users" }
        },
        {
            "name": "User",
            "description": "Represents a user on Twitch.",
            "extends": [[["Base"]]],
            "construct": {
                "name": "User",
                "description": "Creates a user from the given client and",
                "params": [
                    { "name": "client", "description": "Client that instantiated this user.", "type": [[["Client"]]] },
                    {
                        "name": "data",
                        "description": "The raw data provided by the Twitch API.",
                        "type": [[["UserData"]]]
                    }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "Client that instantiated this user.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 29, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "id",
                    "description": "The user's ID.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 37, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "login",
                    "description": "The user's login name (username but all lowercase).",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 45, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "displayName",
                    "description": "The user's display name.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 53, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "type",
                    "description": "The user's type (staff status).",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 61, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "broadcasterType",
                    "description": "The user's broadcaster type (partner program).",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 69, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "viewCount",
                    "description": "Total number of views on this user's channel.",
                    "readonly": true,
                    "type": [[["number"]]],
                    "meta": { "line": 77, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "email",
                    "description": "Returns the email of the user (scope `user:read:email` is required).",
                    "readonly": true,
                    "type": [[["string"]], [["undefined"]]],
                    "meta": { "line": 85, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "description",
                    "description": "The user's description.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 93, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "createdAt",
                    "description": "The Date object when the user was created.",
                    "readonly": true,
                    "type": [[["Date"]]],
                    "meta": { "line": 104, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "createdTimestamp",
                    "description": "The unix timestamp when the user was created.",
                    "readonly": true,
                    "type": [[["number"]]],
                    "meta": { "line": 112, "file": "User.js", "path": "dist/classes/users" }
                }
            ],
            "methods": [
                {
                    "name": "avatarURL",
                    "description": "Returns the user's avatar URL.\nIf `options.offline` is true, the offline avatar will be returned.",
                    "params": [
                        {
                            "name": "options",
                            "description": "Options for the avatar URL.",
                            "type": [[["AvatarURLOptions"]]]
                        }
                    ],
                    "returns": { "types": [[["string"]]], "description": "The user's avatar URL." },
                    "meta": { "line": 121, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "update",
                    "description": "Updates this user object to hold the newest data.",
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the update was successful."
                    },
                    "meta": { "line": 128, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "block",
                    "description": "Blocks the user. Requires the `user:manage:blocked_users` scope.",
                    "params": [
                        {
                            "name": "options",
                            "description": "User block options.",
                            "type": [[["BlockOptions"]], [["undefined"]]]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the user was unblocked."
                    },
                    "meta": { "line": 166, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "unblock",
                    "description": "Unblocks the given user. Requires the `user:manage:blocked_users` scope.",
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "True if the user was unblocked."
                    },
                    "meta": { "line": 195, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "fetchBlocks",
                    "description": "Returns an array of users that are blocked by this user.",
                    "params": [
                        {
                            "name": "options",
                            "description": "Fetch options.",
                            "type": [[["BlocksFetchOptions"]], [["undefined"]]]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["Array", "<"],
                                ["User", ">>"]
                            ]
                        ],
                        "description": "An array of users that are blocked."
                    },
                    "meta": { "line": 220, "file": "User.js", "path": "dist/classes/users" }
                }
            ],
            "meta": { "line": 14, "file": "User.js", "path": "dist/classes/users" }
        },
        {
            "name": "UserManager",
            "description": "Manages the client's users.",
            "extends": [
                [
                    ["Manager", "<"],
                    ["User", ">"]
                ]
            ],
            "construct": {
                "name": "UserManager",
                "description": "Constructs a new user manager.",
                "params": [
                    {
                        "name": "client",
                        "description": "The client that insantiated this manager.",
                        "type": [[["Client"]]]
                    }
                ]
            },
            "props": [
                {
                    "name": "client",
                    "description": "The client that insantiated this manager.",
                    "readonly": true,
                    "type": [[["Client"]]],
                    "meta": { "line": 40, "file": "UserManager.js", "path": "dist/classes/users" }
                }
            ],
            "methods": [
                {
                    "name": "fetch",
                    "description": "Fetch for users from the API with IDs or logins.",
                    "params": [
                        {
                            "name": "query",
                            "description": "Query for users on Twitch.",
                            "type": [[["string"]], [["object"]]]
                        },
                        {
                            "name": "options",
                            "description": "Fetch options.",
                            "type": [[["UserFetchOptions"]], [["undefined"]]]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<("],
                                ["User", "|"],
                                ["undefined", ")>"]
                            ],
                            [
                                ["Promise", "<"],
                                ["Collection", "<"],
                                ["string", ", "],
                                ["user", ">>"]
                            ]
                        ],
                        "description": "The fetched users."
                    },
                    "meta": { "line": 48, "file": "UserManager.js", "path": "dist/classes/users" }
                }
            ],
            "meta": { "line": 15, "file": "UserManager.js", "path": "dist/classes/users" }
        }
    ],
    "interfaces": [],
    "typedefs": [
        {
            "name": "CacheOptions",
            "description": "Options to configure the cache.",
            "type": [[["object"]]],
            "props": [
                {
                    "name": "update",
                    "description": "How long in milliseconds until each update.",
                    "type": [[["number"]]]
                },
                { "name": "ttl", "description": "How long the entity will last in the cache.", "type": [[["number"]]] }
            ],
            "meta": { "line": 126, "file": "Cache.js", "path": "dist/base" }
        },
        {
            "name": "SetEmoteData",
            "type": [[["ChannelEmoteData"]]],
            "props": [{ "name": "owner_id", "type": [[["string"]]] }],
            "meta": { "line": 90, "file": "ChannelEmoteSet.js", "path": "dist/classes/channels" }
        },
        {
            "name": "AvatarURLOptions",
            "description": "Options to retrieve an avatar url.",
            "type": [[["object"]]],
            "props": [
                {
                    "name": "offline",
                    "description": "Fetch offline avatar instead.",
                    "type": [[["boolean"]], [["undefined"]]]
                }
            ],
            "meta": { "line": 246, "file": "User.js", "path": "dist/classes/users" }
        },
        {
            "name": "BlockOptions",
            "description": "Options for blocking a user.",
            "type": [[["object"]]],
            "props": [
                { "name": "reason", "description": "Reason for the block.", "type": [[["string"]], [["undefined"]]] },
                {
                    "name": "sourceContext",
                    "description": "Context for the block.",
                    "type": [[["string"]], [["undefined"]]]
                }
            ],
            "meta": { "line": 251, "file": "User.js", "path": "dist/classes/users" }
        },
        {
            "name": "BlocksFetchOptions",
            "description": "Options for fetching blocks.",
            "type": [[["object"]]],
            "props": [
                { "name": "first", "description": "Offset the first result.", "type": [[["number"]], [["undefined"]]] },
                {
                    "name": "after",
                    "description": "After this date represented as a string.",
                    "type": [[["string"]], [["undefined"]]]
                }
            ],
            "meta": { "line": 257, "file": "User.js", "path": "dist/classes/users" }
        },
        {
            "name": "UserFetchOptions",
            "type": [[["object"]]],
            "props": [
                {
                    "name": "type",
                    "description": "Either \"id\" or \"login\".",
                    "type": [[["string"]], [["undefined"]]]
                },
                {
                    "name": "force",
                    "description": "Skip cache check and request directly from the API.",
                    "type": [[["string"]], [["undefined"]]]
                }
            ],
            "meta": { "line": 145, "file": "UserManager.js", "path": "dist/classes/users" }
        },
        {
            "name": "ClientUpdateOptions",
            "type": [[["object"]]],
            "props": [
                { "name": "users", "type": [[["boolean"]], [["number"]], [["undefined"]]] },
                { "name": "channels", "type": [[["boolean"]], [["number"]], [["undefined"]]] },
                { "name": "emotes", "type": [[["boolean"]], [["number"]], [["undefined"]]] },
                { "name": "channelEmotes", "type": [[["boolean"]], [["number"]], [["undefined"]]] },
                { "name": "channelRewards", "type": [[["boolean"]], [["number"]], [["undefined"]]] }
            ],
            "meta": { "line": 3, "file": "client.js", "path": "dist/types/base" }
        },
        {
            "name": "ClientTTLOptions",
            "type": [[["object"]]],
            "props": [
                { "name": "users", "type": [[["number"]], [["undefined"]]] },
                { "name": "channels", "type": [[["number"]], [["undefined"]]] },
                { "name": "emotes", "type": [[["number"]], [["undefined"]]] },
                { "name": "channelEmotes", "type": [[["number"]], [["undefined"]]] },
                { "name": "channelRewards", "type": [[["number"]], [["undefined"]]] }
            ],
            "meta": { "line": 11, "file": "client.js", "path": "dist/types/base" }
        },
        {
            "name": "ClientOptions",
            "type": [[["object"]]],
            "props": [
                { "name": "clientId", "type": [[["string"]]] },
                { "name": "clientSecret", "type": [[["string"]]] },
                { "name": "redirectUri", "type": [[["string"]], [["undefined"]]] },
                { "name": "forceVerify", "type": [[["string"]], [["undefined"]]] },
                { "name": "state", "type": [[["string"]], [["undefined"]]] },
                {
                    "name": "scope",
                    "type": [
                        [
                            ["Array", "<"],
                            ["string", ">"]
                        ],
                        [["undefined"]]
                    ]
                },
                { "name": "update", "type": [[["ClientUpdateOptions"]]] },
                { "name": "ttl", "type": [[["ClientTTLOptions"]]] },
                { "name": "debug", "type": [[["boolean"]], [["undefined"]]] },
                { "name": "suppressRejections", "type": [[["boolean"]], [["undefined"]]] }
            ],
            "meta": { "line": 19, "file": "client.js", "path": "dist/types/base" }
        },
        {
            "name": "ChannelData",
            "type": [[["object"]]],
            "props": [
                { "name": "broadcaster_id", "type": [[["string"]]] },
                { "name": "broadcaster_name", "type": [[["string"]]] },
                { "name": "game_name", "type": [[["string"]]] },
                { "name": "game_id", "type": [[["string"]]] },
                { "name": "broadcaster_language", "type": [[["string"]]] },
                { "name": "title", "type": [[["string"]]] },
                { "name": "delay", "type": [[["number"]]] }
            ],
            "meta": { "line": 3, "file": "channel.js", "path": "dist/types/classes" }
        },
        {
            "name": "ChannelEmoteData",
            "type": [[["EmoteData"]]],
            "props": [
                { "name": "tier", "type": [[["string"]]] },
                { "name": "emote_type", "type": [[["string"]]] },
                { "name": "emote_set_id", "type": [[["string"]]] }
            ],
            "meta": { "line": 3, "file": "channelEmote.js", "path": "dist/types/classes" }
        },
        {
            "name": "EmoteDataImages",
            "type": [[["object"]]],
            "props": [
                { "name": "url_1x", "description": "Emote's 1x image version.", "type": [[["string"]]] },
                { "name": "url_2x", "description": "Emote's 2x image version.", "type": [[["string"]]] },
                { "name": "url_4x", "description": "Emote's 4x image version.", "type": [[["string"]]] }
            ],
            "meta": { "line": 3, "file": "emote.js", "path": "dist/types/classes" }
        },
        {
            "name": "EmoteData",
            "type": [[["object"]]],
            "props": [
                { "name": "id", "description": "Emote's id.", "type": [[["string"]]] },
                { "name": "name", "description": "Emote's name.", "type": [[["string"]]] },
                { "name": "images", "description": "Emote's images.", "type": [[["EmoteDataImages"]]] }
            ],
            "meta": { "line": 9, "file": "emote.js", "path": "dist/types/classes" }
        },
        {
            "name": "UserData",
            "type": [[["object"]]],
            "props": [
                { "name": "id", "description": "User's id.", "type": [[["string"]]] },
                { "name": "login", "description": "User's login.", "type": [[["string"]]] },
                { "name": "display_name", "description": "User's display name.", "type": [[["string"]]] },
                { "name": "type", "description": "User's type.", "type": [[["string"]]] },
                { "name": "broadcaster_type", "description": "User's broadcast type.", "type": [[["string"]]] },
                { "name": "description", "description": "User's description.", "type": [[["string"]]] },
                { "name": "profile_image_url", "description": "User's profile picture URL.", "type": [[["string"]]] },
                {
                    "name": "offline_image_url",
                    "description": "User's offline profile picure URL.",
                    "type": [[["string"]]]
                },
                { "name": "view_count", "description": "User's view count.", "type": [[["number"]]] },
                { "name": "email", "description": "User's email.", "type": [[["string"]], [["undefined"]]] },
                {
                    "name": "created_at",
                    "description": "User's unix timestamp of when they joined Twitch.",
                    "type": [[["string"]]]
                }
            ],
            "meta": { "line": 3, "file": "user.js", "path": "dist/types/classes" }
        },
        {
            "name": "PubSubOptions",
            "description": "Options for Twitch's PubSub feature.",
            "type": [[["object"]]],
            "props": [
                {
                    "name": "suppressRejections",
                    "description": "Suppresses any rejections coming from the PubSub instance.",
                    "type": [[["boolean"]], [["undefined"]]]
                },
                {
                    "name": "ws",
                    "description": "Options for the websocket.",
                    "type": [[["WebSocketClientOptions"]], [["undefined"]]]
                }
            ],
            "meta": { "line": 3, "file": "index.js", "path": "dist/types/pubsub" }
        }
    ],
    "externals": [
        {
            "name": "Collection",
            "description": "An extended map with utility methods.",
            "see": ["https://github.com/discordjs/collection/blob/master/src/index.ts#L15"],
            "meta": { "line": 8, "file": "index.js", "path": "dist/types/classes" }
        },
        {
            "name": "WebSocketClientOptions",
            "description": "Options for the websocket.",
            "see": [
                "https://github.com/DefinitelyTyped/DefinitelyTyped/blob/69e29e847155bd4d845497319116281cb5a384a3/types/ws/index.d.ts#L171-L187"
            ],
            "meta": { "line": 9, "file": "index.js", "path": "dist/types/pubsub" }
        }
    ]
}
