{
    "meta": { "generator": "1.0.0", "format": 20, "date": 1623719541680 },
    "classes": [
        {
            "name": "Base",
            "description": "Base class for any entity returned by the Twitch API.",
            "abstract": true,
            "construct": {
                "name": "Base",
                "description": "Constructs a new base prototype.",
                "params": [
                    { "name": "client", "description": "Client that instantiated this entity.", "type": [[["Client"]]] }
                ]
            },
            "meta": { "line": 8, "file": "Base.js", "path": "dist/base" }
        },
        {
            "name": "Cache",
            "description": "Implements some sort of LFU cache with a few utility methods.\nBuilt specifically for entity managers.",
            "construct": {
                "name": "Cache",
                "description": "Creates a new cache.",
                "params": [
                    { "name": "options", "description": "Options to configure the caching behaviour.", "type": [] }
                ]
            },
            "methods": [
                {
                    "name": "clear",
                    "description": "Clears the entire cache.",
                    "returns": [[["void"]]],
                    "meta": { "line": 27, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "get",
                    "description": "Retrieves a value from the cache.",
                    "params": [{ "name": "key", "description": "Key to retrieve.", "type": [[["string"]]] }],
                    "returns": [[["Value"]], [["undefined"]]],
                    "meta": { "line": 41, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "set",
                    "description": "Sets or updates a key to a new value.",
                    "params": [
                        { "name": "key", "description": "Key to set or update.", "type": [[["string"]]] },
                        { "name": "value", "description": "New value to store.", "type": [[["Value"]]] }
                    ],
                    "returns": [[["this"]]],
                    "meta": { "line": 63, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "delete",
                    "description": "Deletes a key from the cache.",
                    "params": [{ "name": "key", "description": "Key to delete", "type": [] }],
                    "returns": [[["Value"]]],
                    "meta": { "line": 85, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "has",
                    "description": "Returns true if the cache holds the key.",
                    "params": [{ "name": "key", "description": "Key to check.", "type": [[["string"]]] }],
                    "returns": [[["boolean"]]],
                    "meta": { "line": 100, "file": "Cache.js", "path": "dist/base" }
                },
                {
                    "name": "find",
                    "description": "Performs a search operation on the cache's values.",
                    "params": [
                        {
                            "name": "predicate",
                            "description": "Callback function to execute.",
                            "type": [[["function"]]]
                        },
                        {
                            "name": "thisArg",
                            "description": "Optional `this` context for the callback.",
                            "type": [[["any"]], [["undefined"]]]
                        }
                    ],
                    "returns": [[["Value"]], [["undefined"]]],
                    "meta": { "line": 109, "file": "Cache.js", "path": "dist/base" }
                }
            ],
            "meta": { "line": 12, "file": "Cache.js", "path": "dist/base" }
        },
        {
            "name": "Client",
            "description": "The main client to interact with the Twitch API.\nSupports app and user access tokens and is configurable.\nDelegates API endpoints to different managers.",
            "extends": [[["EventEmitter"]]],
            "construct": {
                "name": "Client",
                "description": "Creates a new client to interact with the Twitch API.",
                "params": [{ "name": "options", "description": "Options for the client.", "type": [] }]
            },
            "props": [
                {
                    "name": "token",
                    "description": "Current token being used.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 240, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "type",
                    "description": "Authentication type; either `\"app\"` or `\"user\"`.",
                    "readonly": true,
                    "type": [[["string"]]],
                    "meta": { "line": 248, "file": "Client.js", "path": "dist/base" }
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "description": "Logs in the client and retrieves an app access token.",
                    "examples": ["```js\nconst token = await client.login();\n```"],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<("],
                                ["string", "|"],
                                ["object", ")>"]
                            ]
                        ],
                        "description": "The new access token or OAuth details object."
                    },
                    "meta": { "line": 55, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "destroy",
                    "description": "Destroys the client and revokes its access token.\n\nTODO: Add a destroy method on managers as well and call it here.",
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["void", ">"]
                            ]
                        ],
                        "description": "Nothing."
                    },
                    "meta": { "line": 151, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "setInterval",
                    "description": "Sets an interval to be managed by the client.",
                    "meta": { "line": 254, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "setTimeout",
                    "description": "Sets a timeout to be managed by the client.",
                    "meta": { "line": 262, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "clearInterval",
                    "description": "Clears an interval managed by the client.",
                    "meta": { "line": 270, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "clearTimeout",
                    "description": "Clears a timeout managed by the client.",
                    "meta": { "line": 278, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "on",
                    "description": "Adds an event listener to the client.",
                    "params": [
                        { "name": "event", "description": "Event to listen to.", "type": [] },
                        { "name": "listener", "description": "Callback for the event.", "type": [] }
                    ],
                    "returns": { "types": [[["Client"]]], "description": "The client instance." },
                    "meta": { "line": 289, "file": "Client.js", "path": "dist/base" }
                },
                {
                    "name": "once",
                    "description": "Adds an event listener to the client, but the listener gets removed as soon as an event is received.",
                    "params": [
                        { "name": "event", "description": "Event to listen to.", "type": [] },
                        { "name": "listener", "description": "Callback for the event.", "type": [] }
                    ],
                    "returns": { "types": [[["Client"]]], "description": "The client instance." },
                    "meta": { "line": 298, "file": "Client.js", "path": "dist/base" }
                }
            ],
            "meta": { "line": 17, "file": "Client.js", "path": "dist/base" }
        },
        {
            "name": "Manager",
            "description": "Manager superclass with a cache and method to fetch entities.",
            "abstract": true,
            "construct": {
                "name": "Manager",
                "description": "Creates a new manager.",
                "params": [
                    { "name": "client", "description": "Client that instantiated this manager.", "type": [] },
                    { "name": "options", "description": "Options for the cache,", "type": [] }
                ]
            },
            "meta": { "line": 11, "file": "Manager.js", "path": "dist/base" }
        },
        {
            "name": "Emote",
            "description": "Represents a global emote on Twitch.",
            "extends": [[["Base"]]],
            "construct": {
                "name": "Emote",
                "description": "Constructs an Emote from the client and raw data.",
                "params": [
                    { "name": "client", "description": "The client this emote belongs to", "type": [[["Client"]]] },
                    { "name": "data", "description": "The raw data provided by the api", "type": [[["EmoteData"]]] }
                ]
            },
            "props": [
                {
                    "name": "id",
                    "description": "The emote's ID",
                    "type": [[["string"]]],
                    "meta": { "line": 29, "file": "Emote.js", "path": "dist/classes/emotes" }
                },
                {
                    "name": "name",
                    "description": "The emote's name",
                    "type": [[["string"]]],
                    "meta": { "line": 36, "file": "Emote.js", "path": "dist/classes/emotes" }
                },
                {
                    "name": "images",
                    "description": "The emote's images",
                    "type": [
                        [
                            ["Array", "<"],
                            ["string", ">"]
                        ]
                    ],
                    "meta": { "line": 43, "file": "Emote.js", "path": "dist/classes/emotes" }
                }
            ],
            "methods": [
                {
                    "name": "update",
                    "description": "Updates this emote's data.\nShould not be called because emotes don't update often.\nOnly here to satify EmoteManager.",
                    "returns": { "types": [], "description": "A promise that resolves to undefined on success" },
                    "meta": { "line": 52, "file": "Emote.js", "path": "dist/classes/emotes" }
                }
            ],
            "meta": { "line": 13, "file": "Emote.js", "path": "dist/classes/emotes" }
        },
        {
            "name": "EmoteManager",
            "description": "Manages global emotes.",
            "extends": [
                [
                    ["Manager", "<"],
                    ["Emote", ">"]
                ]
            ],
            "construct": {
                "name": "EmoteManager",
                "description": "Constructs an EmoteManager for the client.",
                "params": [
                    {
                        "name": "client",
                        "description": "The client that this manager belongs to",
                        "type": [[["Client"]]]
                    }
                ]
            },
            "methods": [
                {
                    "name": "get",
                    "description": "Returns the emote with the given ID in cache or undefined.",
                    "params": [{ "name": "id", "description": "the ID of the emote to get", "type": [] }],
                    "returns": {
                        "types": [[["Emote"]], [["undefined"]]],
                        "description": "the emote with the given ID"
                    },
                    "meta": { "line": 40, "file": "EmoteManager.js", "path": "dist/classes/emotes" }
                }
            ],
            "meta": { "line": 14, "file": "EmoteManager.js", "path": "dist/classes/emotes" }
        },
        {
            "name": "User",
            "description": "Represents a user on twitch.",
            "extends": [[["Base"]]],
            "construct": {
                "name": "User",
                "description": "Creates a user from the given client and",
                "params": [
                    { "name": "client", "description": "The Client instance that this user belongs to", "type": [] },
                    { "name": "data", "description": "The raw data provided by the Twitch API", "type": [] }
                ]
            },
            "props": [
                {
                    "name": "id",
                    "description": "The user's ID.",
                    "type": [[["string"]]],
                    "meta": { "line": 33, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "login",
                    "description": "The user's login name (username but all lowercase).",
                    "type": [[["string"]]],
                    "meta": { "line": 40, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "displayName",
                    "description": "The user's display name.",
                    "type": [[["string"]]],
                    "meta": { "line": 47, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "type",
                    "description": "The user's type (staff status).",
                    "type": [[["string"]]],
                    "meta": { "line": 54, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "broadcasterType",
                    "description": "The user's broadcaster type (partner program).",
                    "type": [[["string"]]],
                    "meta": { "line": 61, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "viewCount",
                    "description": "Total number of views on this user's channel.",
                    "type": [[["number"]]],
                    "meta": { "line": 68, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "email",
                    "description": "Returns the email of the user (scope `user:read:email` is required).",
                    "type": [[["string"]], [["undefined"]]],
                    "meta": { "line": 75, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "description",
                    "description": "The user's description.",
                    "type": [[["string"]]],
                    "meta": { "line": 82, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "createdAt",
                    "description": "The Date when the user was created.",
                    "type": [[["Date"]]],
                    "meta": { "line": 89, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "createdTimestamp",
                    "description": "The timestamp of the user being created.\nIdentical to calling `getTime()` on `createdAt`.",
                    "type": [[["number"]]],
                    "meta": { "line": 97, "file": "User.js", "path": "dist/classes/users" }
                }
            ],
            "methods": [
                {
                    "name": "avatarURL",
                    "description": "Returns the user's avatar URL.\nIf `options.offline` is true, the offline avatar will be returned.",
                    "params": [
                        {
                            "name": "options",
                            "description": "options for the avatar URL",
                            "type": [[["AvatarURLOptions"]]]
                        }
                    ],
                    "returns": { "types": [[["string"]]], "description": "the user's avatar URL" },
                    "meta": { "line": 110, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "update",
                    "description": "Updates this user object to hold the newest data.",
                    "returns": { "types": [], "description": "a promise that should resolve to undefined on success" },
                    "meta": { "line": 117, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "block",
                    "description": "Blocks the user. Requires `user:manage:blocked_users` scope on the client.",
                    "params": [{ "name": "options", "description": "the options for blocking the user", "type": [] }],
                    "returns": {
                        "types": [],
                        "description": "A promise that resolves to a boolean, representing the success of the operation"
                    },
                    "meta": { "line": 155, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "unblock",
                    "description": "Unblocks the given user. Requires `user:manage:blocked_users` scope on the client.",
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["boolean", ">"]
                            ]
                        ],
                        "description": "a promise that is resolved to a boolean representing the success of the operation"
                    },
                    "meta": { "line": 184, "file": "User.js", "path": "dist/classes/users" }
                },
                {
                    "name": "fetchBlocks",
                    "description": "Returns an array of users that were blocked by this user",
                    "params": [
                        { "name": "param0", "description": "pagination options", "type": [[["BlockFetchOptions"]]] }
                    ],
                    "returns": {
                        "types": [
                            [
                                ["Promise", "<"],
                                ["Array", "<"],
                                ["User", ">>"]
                            ]
                        ],
                        "description": "an array of users that this user has blocked"
                    },
                    "meta": { "line": 214, "file": "User.js", "path": "dist/classes/users" }
                }
            ],
            "meta": { "line": 15, "file": "User.js", "path": "dist/classes/users" }
        },
        {
            "name": "UserManager",
            "description": "Manages the client's users.",
            "extends": [
                [
                    ["Manager", "<"],
                    ["User", ">"]
                ]
            ],
            "construct": {
                "name": "UserManager",
                "description": "Constructs a UserManager with the given client.",
                "params": [
                    { "name": "client", "description": "The client that this UserManager belongs to", "type": [] }
                ]
            },
            "meta": { "line": 14, "file": "UserManager.js", "path": "dist/classes/users" }
        }
    ],
    "interfaces": [],
    "typedefs": [
        {
            "name": "AvatarURLOptions",
            "type": [[["object"]]],
            "props": [{ "name": "offline", "description": "fetch offline avatar?", "type": [[["boolean"]]] }],
            "meta": { "line": 100, "file": "User.js", "path": "dist/classes/users" }
        },
        {
            "name": "BlockFetchOptions",
            "type": [[["object"]]],
            "props": [
                { "name": "first", "type": [[["number"]]] },
                { "name": "after", "type": [[["string"]]] }
            ],
            "meta": { "line": 204, "file": "User.js", "path": "dist/classes/users" }
        },
        {
            "name": "ClientUpdateOptions",
            "type": [[["object"]]],
            "props": [
                { "name": "users", "type": [[["boolean"]], [["number"]], [["undefined"]]] },
                { "name": "channels", "type": [[["boolean"]], [["number"]], [["undefined"]]] },
                { "name": "emotes", "type": [[["boolean"]], [["number"]], [["undefined"]]] },
                { "name": "channelEmotes", "type": [[["boolean"]], [["number"]], [["undefined"]]] }
            ],
            "meta": { "line": 3, "file": "client.js", "path": "dist/types/base" }
        },
        {
            "name": "ClientTTLOptions",
            "type": [[["object"]]],
            "props": [
                { "name": "users", "type": [[["number"]], [["undefined"]]] },
                { "name": "channels", "type": [[["number"]], [["undefined"]]] },
                { "name": "emotes", "type": [[["number"]], [["undefined"]]] },
                { "name": "channelEmotes", "type": [[["number"]], [["undefined"]]] }
            ],
            "meta": { "line": 10, "file": "client.js", "path": "dist/types/base" }
        },
        {
            "name": "ClientOptions",
            "type": [[["object"]]],
            "props": [
                { "name": "clientId", "type": [[["string"]]] },
                { "name": "clientSecret", "type": [[["string"]]] },
                { "name": "redirectUri", "type": [[["string"]], [["undefined"]]] },
                { "name": "forceVerify", "type": [[["string"]], [["undefined"]]] },
                { "name": "state", "type": [[["string"]], [["undefined"]]] },
                {
                    "name": "scope",
                    "type": [
                        [
                            ["Array", "<"],
                            ["string", ">"]
                        ],
                        [["undefined"]]
                    ]
                },
                { "name": "update", "type": [[["ClientUpdateOptions"]]] },
                { "name": "ttl", "type": [[["ClientTTLOptions"]]] },
                { "name": "debug", "type": [[["boolean"]], [["undefined"]]] },
                { "name": "suppressRejections", "type": [[["boolean"]], [["undefined"]]] }
            ],
            "meta": { "line": 17, "file": "client.js", "path": "dist/types/base" }
        },
        {
            "name": "ChannelData",
            "type": [[["object"]]],
            "props": [
                { "name": "broadcaster_id", "type": [[["string"]]] },
                { "name": "broadcaster_name", "type": [[["string"]]] },
                { "name": "game_name", "type": [[["string"]]] },
                { "name": "game_id", "type": [[["string"]]] },
                { "name": "broadcaster_language", "type": [[["string"]]] },
                { "name": "title", "type": [[["string"]]] },
                { "name": "delay", "type": [[["number"]]] }
            ],
            "meta": { "line": 3, "file": "channel.js", "path": "dist/types/classes" }
        },
        {
            "name": "ChannelEmoteData",
            "type": [[["object"]]],
            "props": [
                { "name": "id", "type": [[["string"]]] },
                { "name": "name", "type": [[["string"]]] },
                { "name": "images", "type": [[["Object"]]] },
                { "name": "tier", "type": [[["string"]]] },
                { "name": "emote_type", "type": [[["string"]]] },
                { "name": "emote_set_id", "type": [[["string"]]] }
            ],
            "meta": { "line": 3, "file": "channelEmote.js", "path": "dist/types/classes" }
        },
        {
            "name": "EmoteDataImages",
            "type": [[["object"]]],
            "props": [
                { "name": "url_1x", "type": [[["string"]]] },
                { "name": "url_2x", "type": [[["string"]]] },
                { "name": "url_4x", "type": [[["string"]]] }
            ],
            "meta": { "line": 3, "file": "emote.js", "path": "dist/types/classes" }
        },
        {
            "name": "EmoteData",
            "type": [[["object"]]],
            "props": [
                { "name": "id", "type": [[["string"]]] },
                { "name": "name", "type": [[["string"]]] },
                { "name": "images", "type": [[["EmoteDataImages"]]] }
            ],
            "meta": { "line": 9, "file": "emote.js", "path": "dist/types/classes" }
        },
        {
            "name": "UserData",
            "type": [[["object"]]],
            "props": [
                { "name": "id", "type": [[["string"]]] },
                { "name": "login", "type": [[["string"]]] },
                { "name": "display_name", "type": [[["string"]]] },
                { "name": "type", "type": [[["string"]]] },
                { "name": "broadcaster_type", "type": [[["string"]]] },
                { "name": "description", "type": [[["string"]]] },
                { "name": "profile_image_url", "type": [[["string"]]] },
                { "name": "offline_image_url", "type": [[["string"]]] },
                { "name": "view_count", "type": [[["number"]]] },
                { "name": "email", "type": [[["string"]], [["undefined"]]] },
                { "name": "created_at", "type": [[["string"]]] }
            ],
            "meta": { "line": 3, "file": "user.js", "path": "dist/types/classes" }
        },
        {
            "name": "PubSubOptions",
            "type": [[["object"]]],
            "props": [
                {
                    "name": "suppressRejections",
                    "description": "Suppresses any rejections coming from the PubSub instance.",
                    "type": [[["boolean"]], [["undefined"]]]
                },
                {
                    "name": "ws",
                    "description": "Options for the websocket.",
                    "type": [[["WebSocketClientOptions"]], [["undefined"]]]
                }
            ],
            "meta": { "line": 3, "file": "index.js", "path": "dist/types/pubsub" }
        }
    ],
    "externals": [
        {
            "name": "WebSocketClientOptions",
            "description": "Options for the websocket.",
            "see": [
                "https://github.com/DefinitelyTyped/DefinitelyTyped/blob/69e29e847155bd4d845497319116281cb5a384a3/types/ws/index.d.ts#L171-L187"
            ],
            "meta": { "line": 8, "file": "index.js", "path": "dist/types/pubsub" }
        }
    ]
}
